<html>
<head>
  <title>Color Analysis</title>
  <script type="text/javascript">
    function startAllWebGL(){
      rgbwebGLStart();
      pcawebGLStart();
    }
  </script>

</head>
<body onload="startAllWebGL();">

<h2>Introduction</h2>




<h3>Method</h3>

I randomly generated a symmetric matrix and plotted it out as a heatmap using each of the 18 color palettes. I provided a legend next to each heatmap to provide a numeric interpretation of the data as shown below.

<div class="rimage center"><img src="figure/palette-14.png"  class="plot" /></div>

I found initially that a 9-color palette didn't have enough variation to generate sufficiently interesting differences between them, so I interpolated 9 extra colors for each palette using the following function.

<!--begin.rcode
#' Interpolate any number of colors from a provided color palette
#' @param n The number of colors desired in the new palette
#' @param palette a data.frame or matrix with each color occupying one row, and the columns being different color dimensions (RGB, HCL, etc.)
#' @return A data.frame with the same columns as the provided palette but with n interpolated rows representing n colors.
interpolateNewPalette <- function(n, palette){
  newPalette <- data.frame(matrix(NA, nrow=n, ncol=ncol(palette)))
  for (colIndex in 1:ncol(palette)){
    rspline <- smooth.spline(1:nrow(palette), palette[,colIndex], w=c(1,rep(.1, nrow(palette)-2), 1))
    newPalette[,colIndex] <- predict(rspline, seq(1, nrow(palette),length.out=n))$y
    
    #limit to [0,255]
    newPalette[newPalette[,colIndex]>255,colIndex] <- 255
    newPalette[newPalette[,colIndex]<0,colIndex] <- 0
  }
  colnames(newPalette) <- colnames(palette)
  newPalette
}
end.rcode-->

This provided a sufficient level of detail to allow for some meainingful errors when reading these heatmaps.

<h2>Analysis</h2>

<h3>Load Data</h3>

In a separate file, we've created the functions needed to read in and parse the results from the turk experiments. We'll execute this file to calculate the delta (error) value in each experiment. One shortcoming of conducting an experiment on Mechanical Turk is that it can be difficult to filter our the honest attempts at completing the experiment from fraudulent attempts just aiming to complete the tasks as quickly as possible. With this in mind, I decided that an entered value more than 4 away from the true answer would be labeled as "fraudulent" and rejected; so we'll see no attempts further than 4 away from the truth.

We'll also load in the truth matrix from which the figures for all experiments were generated.

<!--begin.rcode fig.align='center', fig.width=7, fig.height=12
mat <- readRDS("../hifimat.Rds")
suppressWarnings(source("ColorReadabilityAnalysis.R"))
source("PAColorPlot.R")
acc <- turkResults$acc
delta <- turkResults$delta
str(delta)
end.rcode-->

You can see the structure of the data here; we have approximately 60 values for all 18 palettes. These values represent the difference between the value entered by the "worker" and the true value used to generate the figure.

<h3>Analysis of Variance</h3>

The first thing we'll want to check is whether or not there's a meaningful difference between these different palettes. We can compute the p-value to check:

<!--begin.rcode fig.align='center'
boxplot(delta, xlab="Palette #", ylab="Error", main="Error for each Palette")
pv <- anova(lm(acc$delta~as.factor(acc$palette)))$"Pr(>F)"[1]
end.rcode-->

With a p-value of <!--rinline round(pv,3) -->, it appears there is a meaningful difference between the palettes. The boxplot is a bit busy for my liking; perhaps another way to view the data would be to create a simple barplot of the average error for any palette.

<!--begin.rcode fig.align='center'
delta <- sapply(delta, mean)
barplot(delta, xlab="Palette #", ylab="Average (mean) Error", main="Average Error for each Palette")
end.rcode-->

Clearly, there are some palettes which communicate this information much more clearly than others. We can now begin trying to uncover what similarities the "effective" palettes have or what features make a color palette conducive for conveying information in this format.

<h3>Color Delta</h3>

One aspect we could consider is the difference between the color displayed, and the color associated with the number the user entered. This could provide some insight into which dimensions of the color palette are least accureately percieved by users.

We'll want to start by creating a function that's able to lookup a color based on the number entered.

<!--begin.rcode
numToColor <- function(num, palette, range=c(1,18)){
  norm <- (num-min(range))/diff(range)
  
  norm <- round(norm * nrow(palette))
  
  return(palette[norm,])
}
end.rcode-->

We'll then add a function that can calculate the difference on each dimension between two colors:

<!--begin.rcode
colorDiff <- function(col1, col2){
  return(abs(col2-col1))
}
end.rcode-->

We can now fairly simply compute the color read by the user and calculate the difference between the color that was actually depicted.

<!--begin.rcode
library(colorspace)
for(i in 1:nrow(acc)){
  thisAcc <- acc[i,]
  trueColor <- numToColor(mat[thisAcc$x, thisAcc$y], interpolateNewPalette(18, allSequential[[as.numeric(thisAcc$palette)]]))
  
}
end.rcode-->


</body>
</html>